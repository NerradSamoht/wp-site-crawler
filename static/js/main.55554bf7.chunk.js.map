{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MEDIA_URL","App","state","url","description","main","posts","postCount","pages","pageCount","images","imageCount","nextPage","handleOnMediaButtonClick","_this","bind","Object","assertThisInitialized","handleChange","e","setState","target","value","handleClick","getData","filterImagesByMediaType","data","media_type","_this2","this","pagesUrl","postsUrl","mediaUrl","fetch","then","response","json","length","filter","getMediaNextPage","_this3","concat","newImages","index","self","findIndex","image","id","catch","error","console","log","_this$state","react_default","a","createElement","map","page","key","link","post","className","href","guid","rendered","rel","media_details","sizes","thumbnail","alt","alt_text","src","source_url","width","height","htmlFor","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55554bf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst MEDIA_URL = '/wp-json/wp/v2/media?per_page=100';\nconst PAGE_URL = '/wp-json/wp/v2/pages?per_page=100';\nconst POST_URL = '/wp-json/wp/v2/posts?per_page=100';\n\n\nclass App extends Component {\n  state = {\n    url: '',\n    description: null,\n    main: [],\n    posts: [],\n    postCount: 0,\n    pages: [],\n    pageCount: 0,\n    images: [],\n    imageCount: 0,\n    nextPage: 1\n  }\n\n  handleOnMediaButtonClick = this.handleOnMediaButtonClick.bind(this)\n\n\n  handleChange = (e) => {\n    this.setState({ url: e.target.value })\n  }\n\n  handleClick = () => {\n    this.getData()\n  }\n\n  getData() {\n\n    const url = this.state.url;\n    const pagesUrl = url + PAGE_URL;\n    const postsUrl = url + POST_URL;\n    const mediaUrl = url + MEDIA_URL;\n\n    fetch(url + '/wp-json')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          main: data,\n          url: data.url,\n          description: data.description\n        });\n      })\n\n    fetch(pagesUrl)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          pages: data,\n          pageCount: data.length\n        });\n      })\n\n    fetch(postsUrl)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          posts: data,\n          postCount: data.length\n        });\n      })\n\n    fetch(mediaUrl)\n      .then(response => response.json())\n      .then(data => {\n        const images = data.filter(this.filterImagesByMediaType);\n        this.setState({\n          images,\n          imageCount: images.length\n        });\n      })\n\n\n  }\n\n  filterImagesByMediaType = (data) => {\n    return data.media_type === 'image';\n  }\n\n\n  handleOnMediaButtonClick() {\n    this.setState(function (state) {\n      return {\n        nextPage: state.nextPage + 1\n      }\n    }, function () {\n      this.getMediaNextPage()\n    })\n  }\n\n  getMediaNextPage() {\n    fetch(`${this.state.url}${MEDIA_URL}&page=${this.state.nextPage}`)\n      .then(response => response.json())\n      .then(data => {\n        const newImages = data.filter(this.filterImagesByMediaType);\n        const allImages = this.state.images.concat(newImages);\n        const images = allImages.filter((images, index, self) =>\n          index === self.findIndex((image) => (\n            image.id === images.id)));\n        this.setState({\n          images,\n          imageCount: images.length\n        });\n      })\n      .catch(error => console.log('Error: ' + error))\n  }\n\n  render() {\n    const { url, description, pageCount, postCount, imageCount } = this.state;\n\n    const pages = <ul>{this.state.pages.map(page => {\n      return (\n        <li key={'page-' + page.id}>{page.link}</li>\n      )\n    })}</ul>\n\n    const posts = <ul>{this.state.posts.map(post => {\n      return (\n        <li key={'post-' + post.id}>{post.link}</li>\n      )\n    })}</ul>\n\n    const images = <ul className=\"thumbnails\">{this.state.images.map(image => {\n      return (\n        <li key={'media-' + image.id}><a href={image.guid.rendered} target=\"_blank\" rel=\"noopener noreferrer\">\n\n          {image.media_details ?\n            image.media_details.sizes ?\n              image.media_details.sizes.thumbnail ?\n                <img alt={image.alt_text} src={image.media_details.sizes.thumbnail.source_url} width='150' height='150' />\n                : <img alt={image.alt_text} src={image.source_url} width='150' height='150' />\n              : <img alt={image.alt_text} src={image.source_url} width='150' height='150' />\n            : <img alt={image.alt_text} src={image.source_url} width='150' height='150' />\n          }\n        </a> <span className=\"alt-text\">{image.alt_text}</span></li>)\n\n    })}</ul>\n\n\n\n    return (\n      <div className=\"app\">\n        <div>\n          <label htmlFor=\"input\">Enter a url: </label>\n          <input id=\"input\" type=\"url\" onChange={this.handleChange} />\n          <button onClick={this.handleClick}>Submit</button>\n        </div>\n        <p>Site: {url}</p>\n        <p>Tagline: {description}</p>\n        <p>Pages: {pageCount}</p>\n        <p>Posts: {postCount}</p>\n        <section>\n          <h2>Pages ({pageCount})</h2>\n          {pages}\n        </section>\n        <section>\n          <h2>Posts ({postCount})</h2>\n          {posts}\n        </section>\n        <section>\n          <h2>Images ({imageCount})</h2>\n          {images}\n          <button className=\"imageButton\" onClick={this.handleOnMediaButtonClick}>Show more</button>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}